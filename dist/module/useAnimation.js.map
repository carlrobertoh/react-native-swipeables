{"version":3,"sources":["useAnimation.ts"],"names":["useState","Animated","Dimensions","PanResponder","SCREEN_WIDTH","get","width","useAnimation","props","currentIndex","setCurrentIndex","position","ValueXY","panResponder","create","onStartShouldSetPanResponder","onPanResponderMove","_","gestureState","setValue","x","dx","y","dy","onPanResponderRelease","animate","toX","action","spring","useNativeDriver","toValue","start","prevIndex","onSwipe","friction","interpolateConfig","rotate","interpolate","likeOpacity","nopeOpacity","nextCardOpacity","nextCardScale","rotateAndTranslate","transform","getTranslateTransform","panHandlers","outputRange","inputRange","extrapolate"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport { Animated, Dimensions, PanResponder } from 'react-native';\n\ntype ActionType = 'like' | 'dislike';\n\nconst SCREEN_WIDTH = Dimensions.get('window').width;\n\nexport const useAnimation = (props: {\n  onSwipe: (selectedIndex: number, actionType: ActionType) => void;\n}) => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const position = new Animated.ValueXY();\n  const panResponder = PanResponder.create({\n    onStartShouldSetPanResponder: () => true,\n    onPanResponderMove: (_, gestureState) =>\n      position.setValue({ x: gestureState.dx, y: gestureState.dy }),\n    onPanResponderRelease: (_, gestureState) => {\n      const animate = (toX: number, action: ActionType) => {\n        Animated.spring(position, {\n          useNativeDriver: true,\n          toValue: { x: toX, y: gestureState.dy },\n        }).start(() => {\n          position.setValue({ x: 0, y: 0 });\n        });\n        setCurrentIndex(prevIndex => prevIndex + 1);\n        props.onSwipe(currentIndex, action);\n      };\n\n      if (gestureState.dx > 120) {\n        return animate(SCREEN_WIDTH + 100, 'like');\n      }\n      if (gestureState.dx < -120) {\n        return animate(-SCREEN_WIDTH - 100, 'dislike');\n      }\n      Animated.spring(position, {\n        useNativeDriver: true,\n        toValue: { x: 0, y: 0 },\n        friction: 4,\n      }).start();\n    },\n  });\n\n  const interpolateConfig = {\n    rotate: interpolate(['-10deg', '0deg', '10deg'], position),\n    likeOpacity: interpolate([0, 0, 1], position),\n    nopeOpacity: interpolate([1, 0, 0], position),\n    nextCardOpacity: interpolate([1, 0, 1], position),\n    nextCardScale: interpolate([1, 0.8, 1], position),\n  };\n\n  const rotateAndTranslate = {\n    transform: [\n      {\n        rotate: interpolateConfig.rotate,\n      },\n      ...position.getTranslateTransform(),\n    ],\n  };\n\n  return {\n    currentIndex,\n    position,\n    rotateAndTranslate,\n    interpolateConfig,\n    panHandlers: panResponder.panHandlers,\n  };\n};\n\nexport const interpolate = (\n  outputRange: number[] | string[],\n  position: Animated.ValueXY,\n) =>\n  position.x.interpolate({\n    outputRange,\n    inputRange: [-SCREEN_WIDTH / 2, 0, SCREEN_WIDTH / 2],\n    extrapolate: 'clamp',\n  });\n"]}