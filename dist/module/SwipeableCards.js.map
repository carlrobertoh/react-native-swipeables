{"version":3,"sources":["SwipeableCards.tsx"],"names":["React","Animated","ActionTag","interpolate","useAnimation","SwipeableCards","enableActionTags","props","data","map","item","i","index","currentIndex","position","rotateAndTranslate","interpolateConfig","panHandlers","onSwipe","selectedIndex","actionType","itemDefinition","find","onChange","likeOpacity","nopeOpacity","render","opacity","transform","scale","reverse"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,QAAT,QAAyB,cAAzB;AAEA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,gBAA1C;AAeA,OAAO,MAAMC,cAAc,GAAG,QAAqE;AAAA,MAAlD;AAACC,IAAAA,gBAAgB,GAAG,IAApB;AAA0B,OAAGC;AAA7B,GAAkD;AACjG,QAAMC,IAAI,GAAGD,KAAK,CAACC,IAAN,CAAWC,GAAX,CAAe,CAACC,IAAD,EAAOC,CAAP,MAAc,EAAE,GAAGD,IAAL;AAAWE,IAAAA,KAAK,EAAED;AAAlB,GAAd,CAAf,CAAb;AACA,QAAM;AACJE,IAAAA,YADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,kBAHI;AAIJC,IAAAA,iBAJI;AAKJC,IAAAA;AALI,MAMFb,YAAY,CAAC;AACfc,IAAAA,OAAO,EAAE,CAACC,aAAD,EAAgBC,UAAhB,KAA+B;AACtC,YAAMC,cAAc,GAAGb,IAAI,CAACc,IAAL,CAAUX,CAAC,IAAIA,CAAC,CAACC,KAAF,KAAYO,aAA3B,CAAvB;;AACA,UAAIE,cAAJ,EAAoB;AAClBd,QAAAA,KAAK,CAACgB,QAAN,CAAeF,cAAc,CAACX,IAA9B,EAAoCU,UAApC;AACD;AACF;AANc,GAAD,CANhB;AAeA,sBACE,0CACGZ,IAAI,CACFC,GADF,CACMY,cAAc,IAAI;AACrB,QAAIA,cAAc,CAACT,KAAf,GAAuBC,YAA3B,EAAyC;AACvC,aAAO,IAAP;AACD;;AACD,QAAIQ,cAAc,CAACT,KAAf,KAAyBC,YAA7B,EAA2C;AACzC,0BACE,oBAAC,QAAD,CAAU,IAAV,eACMI,WADN;AAEE,QAAA,GAAG,EAAEI,cAAc,CAACT,KAFtB;AAGE,QAAA,KAAK,EAAE,CAACG,kBAAD;AAHT,UAIGT,gBAAgB,iBACf,uDACE,oBAAC,SAAD;AACE,QAAA,YAAY,MADd;AAEE,QAAA,OAAO,EAAEU,iBAAiB,CAACQ;AAF7B,gBADF,eAME,oBAAC,SAAD;AAAW,QAAA,OAAO,EAAER,iBAAiB,CAACS;AAAtC,gBANF,CALJ,EAgBGJ,cAAc,CAACK,MAAf,CAAsBL,cAAc,CAACX,IAArC,CAhBH,CADF;AAoBD;;AAED,wBACE,oBAAC,QAAD,CAAU,IAAV;AACE,MAAA,GAAG,EAAEW,cAAc,CAACT,KADtB;AAEE,MAAA,KAAK,EAAE;AACLe,QAAAA,OAAO,EAAExB,WAAW,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAD,EAAYW,QAAZ,CADf;AAELc,QAAAA,SAAS,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAE1B,WAAW,CAAC,CAAC,CAAD,EAAI,GAAJ,EAAS,CAAT,CAAD,EAAcW,QAAd;AAApB,SAAD;AAFN;AAFT,OAMGO,cAAc,CAACK,MAAf,CAAsBL,cAAc,CAACX,IAArC,CANH,CADF;AAUD,GAtCF,EAuCEoB,OAvCF,EADH,CADF;AA4CD,CA7DM","sourcesContent":["import React from 'react';\n\nimport { Animated } from 'react-native';\n\nimport { ActionTag } from './ActionTag';\nimport { interpolate, useAnimation } from './useAnimation';\n\ntype ActionType = 'like' | 'dislike';\n\ninterface ItemDefinition<T> {\n  item: T;\n  render: (item: T) => React.ReactNode;\n}\n\ninterface Props<T extends object> {\n  data: ItemDefinition<T>[];\n  onChange: (item: T, action: ActionType) => void;\n  enableActionTags?: boolean;\n}\n\nexport const SwipeableCards = <T extends object>({enableActionTags = true, ...props}: Props<T>) => {\n  const data = props.data.map((item, i) => ({ ...item, index: i }));\n  const {\n    currentIndex,\n    position,\n    rotateAndTranslate,\n    interpolateConfig,\n    panHandlers,\n  } = useAnimation({\n    onSwipe: (selectedIndex, actionType) => {\n      const itemDefinition = data.find(i => i.index === selectedIndex);\n      if (itemDefinition) {\n        props.onChange(itemDefinition.item, actionType);\n      }\n    },\n  });\n\n  return (\n    <>\n      {data\n        .map(itemDefinition => {\n          if (itemDefinition.index < currentIndex) {\n            return null;\n          }\n          if (itemDefinition.index === currentIndex) {\n            return (\n              <Animated.View\n                {...panHandlers}\n                key={itemDefinition.index}\n                style={[rotateAndTranslate]}>\n                {enableActionTags && (\n                  <>\n                    <ActionTag\n                      isLikeAction\n                      opacity={interpolateConfig.likeOpacity}>\n                      LIKE\n                    </ActionTag>\n                    <ActionTag opacity={interpolateConfig.nopeOpacity}>\n                      NOPE\n                    </ActionTag>\n                  </>\n                )}\n                {itemDefinition.render(itemDefinition.item)}\n              </Animated.View>\n            );\n          }\n\n          return (\n            <Animated.View\n              key={itemDefinition.index}\n              style={{\n                opacity: interpolate([1, 0, 1], position),\n                transform: [{ scale: interpolate([1, 0.8, 1], position) }],\n              }}>\n              {itemDefinition.render(itemDefinition.item)}\n            </Animated.View>\n          );\n        })\n        .reverse()}\n    </>\n  );\n};\n"]}