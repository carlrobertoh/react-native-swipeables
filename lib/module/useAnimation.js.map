{"version":3,"sources":["useAnimation.ts"],"names":["useState","Animated","Dimensions","PanResponder","SCREEN_WIDTH","get","width","SCREEN_HEIGHT","height","useAnimation","props","currentIndex","setCurrentIndex","position","ValueXY","panResponder","create","onStartShouldSetPanResponder","onPanResponderMove","_","gestureState","setValue","x","dx","y","dy","onPanResponderRelease","animate","toValue","direction","spring","useNativeDriver","start","prevIndex","onSwipe","friction","interpolateConfig","rotate","interpolateX","likeOpacity","superLikeOpacity","interpolateY","nopeOpacity","nextCardOpacity","nextCardScale","rotateAndTranslate","transform","getTranslateTransform","panHandlers","outputRange","interpolate","inputRange","extrapolate"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,SAASC,QAAT,EAAmBC,UAAnB,EAA+BC,YAA/B,QAAmD,cAAnD;AAIA,MAAMC,YAAY,GAAGF,UAAU,CAACG,GAAX,CAAe,QAAf,EAAyBC,KAA9C;AACA,MAAMC,aAAa,GAAGL,UAAU,CAACG,GAAX,CAAe,QAAf,EAAyBG,MAA/C;AAEA,OAAO,MAAMC,YAAY,GAAIC,KAAD,IAEtB;AACJ,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,CAAD,CAAhD;AAEA,QAAMa,QAAQ,GAAG,IAAIZ,QAAQ,CAACa,OAAb,EAAjB;AACA,QAAMC,YAAY,GAAGZ,YAAY,CAACa,MAAb,CAAoB;AACvCC,IAAAA,4BAA4B,EAAE,MAAM,IADG;AAEvCC,IAAAA,kBAAkB,EAAE,CAACC,CAAD,EAAIC,YAAJ,KAClBP,QAAQ,CAACQ,QAAT,CAAkB;AAAEC,MAAAA,CAAC,EAAEF,YAAY,CAACG,EAAlB;AAAsBC,MAAAA,CAAC,EAAEJ,YAAY,CAACK;AAAtC,KAAlB,CAHqC;AAIvCC,IAAAA,qBAAqB,EAAE,CAACP,CAAD,EAAIC,YAAJ,KAAqB;AAC1C,YAAMO,OAAO,GAAG,CAACC,OAAD,EAAoCC,SAApC,KAA6D;AAC3E5B,QAAAA,QAAQ,CAAC6B,MAAT,CAAgBjB,QAAhB,EAA0B;AACxBe,UAAAA,OADwB;AAExBG,UAAAA,eAAe,EAAE;AAFO,SAA1B,EAGGC,KAHH,CAGS,MAAM;AACbnB,UAAAA,QAAQ,CAACQ,QAAT,CAAkB;AAAEC,YAAAA,CAAC,EAAE,CAAL;AAAQE,YAAAA,CAAC,EAAE;AAAX,WAAlB;AACD,SALD;AAMAZ,QAAAA,eAAe,CAAEqB,SAAD,IAAeA,SAAS,GAAG,CAA5B,CAAf;AACAvB,QAAAA,KAAK,CAACwB,OAAN,CAAcvB,YAAd,EAA4BkB,SAA5B;AACD,OATD;;AAWA,UAAIT,YAAY,CAACG,EAAb,GAAkB,GAAtB,EAA2B;AACzB,eAAOI,OAAO,CAAC;AAAEL,UAAAA,CAAC,EAAElB,YAAY,GAAG,GAApB;AAAyBoB,UAAAA,CAAC,EAAEJ,YAAY,CAACK;AAAzC,SAAD,EAAgD,OAAhD,CAAd;AACD;;AACD,UAAIL,YAAY,CAACG,EAAb,GAAkB,CAAC,GAAvB,EAA4B;AAC1B,eAAOI,OAAO,CAAC;AAAEL,UAAAA,CAAC,EAAE,CAAClB,YAAD,GAAgB,GAArB;AAA0BoB,UAAAA,CAAC,EAAEJ,YAAY,CAACK;AAA1C,SAAD,EAAiD,MAAjD,CAAd;AACD;;AACD,UAAIL,YAAY,CAACK,EAAb,GAAkB,CAAC,GAAvB,EAA4B;AAC1B,eAAOE,OAAO,CAAC;AAAEL,UAAAA,CAAC,EAAEF,YAAY,CAACG,EAAlB;AAAsBC,UAAAA,CAAC,EAAE,CAACjB,aAAD,GAAiB;AAA1C,SAAD,EAAkD,KAAlD,CAAd;AACD;;AACDN,MAAAA,QAAQ,CAAC6B,MAAT,CAAgBjB,QAAhB,EAA0B;AACxBkB,QAAAA,eAAe,EAAE,IADO;AAExBH,QAAAA,OAAO,EAAE;AAAEN,UAAAA,CAAC,EAAE,CAAL;AAAQE,UAAAA,CAAC,EAAE;AAAX,SAFe;AAGxBW,QAAAA,QAAQ,EAAE;AAHc,OAA1B,EAIGH,KAJH;AAKD;AA9BsC,GAApB,CAArB;AAgCA,QAAMI,iBAAiB,GAAG;AACxBC,IAAAA,MAAM,EAAEC,YAAY,CAAC,CAAC,QAAD,EAAW,MAAX,EAAmB,OAAnB,CAAD,EAA8BzB,QAA9B,CADI;AAExB0B,IAAAA,WAAW,EAAED,YAAY,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAD,EAAYzB,QAAZ,CAFD;AAGxB2B,IAAAA,gBAAgB,EAAEC,YAAY,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAD,EAAY5B,QAAZ,CAHN;AAIxB6B,IAAAA,WAAW,EAAEJ,YAAY,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAD,EAAYzB,QAAZ,CAJD;AAKxB8B,IAAAA,eAAe,EAAEL,YAAY,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAD,EAAYzB,QAAZ,CALL;AAMxB+B,IAAAA,aAAa,EAAEN,YAAY,CAAC,CAAC,CAAD,EAAI,GAAJ,EAAS,CAAT,CAAD,EAAczB,QAAd;AANH,GAA1B;AAQA,QAAMgC,kBAAkB,GAAG;AACzBC,IAAAA,SAAS,EAAE,CACT;AACET,MAAAA,MAAM,EAAED,iBAAiB,CAACC;AAD5B,KADS,EAIT,GAAGxB,QAAQ,CAACkC,qBAAT,EAJM;AADc,GAA3B;AASA,SAAO;AACLpC,IAAAA,YADK;AAELE,IAAAA,QAFK;AAGLgC,IAAAA,kBAHK;AAILT,IAAAA,iBAJK;AAKLY,IAAAA,WAAW,EAAEjC,YAAY,CAACiC;AALrB,GAAP;AAOD,CA9DM;AAgEP,OAAO,MAAMV,YAAY,GAAG,CAACW,WAAD,EAAmCpC,QAAnC,KAC1BA,QAAQ,CAACS,CAAT,CAAW4B,WAAX,CAAuB;AACrBD,EAAAA,WADqB;AAErBE,EAAAA,UAAU,EAAE,CAAC,CAAC/C,YAAD,GAAgB,CAAjB,EAAoB,CAApB,EAAuBA,YAAY,GAAG,CAAtC,CAFS;AAGrBgD,EAAAA,WAAW,EAAE;AAHQ,CAAvB,CADK;AAOP,OAAO,MAAMX,YAAY,GAAG,CAACQ,WAAD,EAAmCpC,QAAnC,KAC1BA,QAAQ,CAACW,CAAT,CAAW0B,WAAX,CAAuB;AACrBD,EAAAA,WADqB;AAErBE,EAAAA,UAAU,EAAE,CAAC,CAAC5C,aAAD,GAAiB,CAAlB,EAAqB,CAArB,EAAwBA,aAAa,GAAG,CAAxC,CAFS;AAGrB6C,EAAAA,WAAW,EAAE;AAHQ,CAAvB,CADK","sourcesContent":["import { useState } from 'react';\n\nimport { Animated, Dimensions, PanResponder } from 'react-native';\n\nimport { Direction } from './types';\n\nconst SCREEN_WIDTH = Dimensions.get('window').width;\nconst SCREEN_HEIGHT = Dimensions.get('window').height;\n\nexport const useAnimation = (props: {\n  onSwipe: (selectedIndex: number, direction: Direction) => void;\n}) => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  const position = new Animated.ValueXY();\n  const panResponder = PanResponder.create({\n    onStartShouldSetPanResponder: () => true,\n    onPanResponderMove: (_, gestureState) =>\n      position.setValue({ x: gestureState.dx, y: gestureState.dy }),\n    onPanResponderRelease: (_, gestureState) => {\n      const animate = (toValue: { x: number; y: number }, direction: Direction) => {\n        Animated.spring(position, {\n          toValue,\n          useNativeDriver: true,\n        }).start(() => {\n          position.setValue({ x: 0, y: 0 });\n        });\n        setCurrentIndex((prevIndex) => prevIndex + 1);\n        props.onSwipe(currentIndex, direction);\n      };\n\n      if (gestureState.dx > 120) {\n        return animate({ x: SCREEN_WIDTH + 100, y: gestureState.dy }, 'right');\n      }\n      if (gestureState.dx < -120) {\n        return animate({ x: -SCREEN_WIDTH - 100, y: gestureState.dy }, 'left');\n      }\n      if (gestureState.dy < -120) {\n        return animate({ x: gestureState.dx, y: -SCREEN_HEIGHT - 100 }, 'top');\n      }\n      Animated.spring(position, {\n        useNativeDriver: true,\n        toValue: { x: 0, y: 0 },\n        friction: 4,\n      }).start();\n    },\n  });\n  const interpolateConfig = {\n    rotate: interpolateX(['-10deg', '0deg', '10deg'], position),\n    likeOpacity: interpolateX([0, 0, 1], position),\n    superLikeOpacity: interpolateY([1, 0, 0], position),\n    nopeOpacity: interpolateX([1, 0, 0], position),\n    nextCardOpacity: interpolateX([1, 0, 1], position),\n    nextCardScale: interpolateX([1, 0.8, 1], position),\n  };\n  const rotateAndTranslate = {\n    transform: [\n      {\n        rotate: interpolateConfig.rotate,\n      },\n      ...position.getTranslateTransform(),\n    ],\n  };\n\n  return {\n    currentIndex,\n    position,\n    rotateAndTranslate,\n    interpolateConfig,\n    panHandlers: panResponder.panHandlers,\n  };\n};\n\nexport const interpolateX = (outputRange: number[] | string[], position: Animated.ValueXY) =>\n  position.x.interpolate({\n    outputRange,\n    inputRange: [-SCREEN_WIDTH / 2, 0, SCREEN_WIDTH / 2],\n    extrapolate: 'clamp',\n  });\n\nexport const interpolateY = (outputRange: number[] | string[], position: Animated.ValueXY) =>\n  position.y.interpolate({\n    outputRange,\n    inputRange: [-SCREEN_HEIGHT / 2, 0, SCREEN_HEIGHT / 2],\n    extrapolate: 'clamp',\n  });\n"]}